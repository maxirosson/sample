allprojects {
	repositories {
		jcenter()
		google()
		String localMavenRepo = project.hasProperty('LOCAL_MAVEN_REPO') ? project.ext.get('LOCAL_MAVEN_REPO') : System.getenv('LOCAL_MAVEN_REPO')
		if (localMavenRepo != null) {
			maven { url localMavenRepo }
		}
	}
	buildscript {
		repositories {
			jcenter()
			String localMavenRepo = project.hasProperty('LOCAL_MAVEN_REPO') ? project.ext.get('LOCAL_MAVEN_REPO') : System.getenv('LOCAL_MAVEN_REPO')
			if (localMavenRepo != null) {
				maven { url localMavenRepo }
			}
			maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		}
	}
}

buildscript {
	repositories {
		jcenter()
		google()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.5.3'
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
	}
}



if (System.getenv("CI") == "true") {
	println("ON CI")
} else {
	println("NOT CI")
}

apply plugin: 'org.sonarqube'

sonarqube {
	properties {
		property "sonar.projectKey", "maxirosson_sample"
		property "sonar.organization", "maxirosson"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.projectName", "sample"

		property "sonar.java.coveragePlugin", "jacoco"

		property "sonar.coverage.jacoco.xmlReportPaths", fileTree(dir: project.projectDir, includes: ['**/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'])

		property "sonar.pullrequest.github.repository", "maxirosson/sample"
		property "sonar.pullrequest.provider", "GitHub"

		// TODO
		property "sonar.pullrequest.base", "master"

		//property "sonar.login", "dc4b27eda8dc8f53d86f7159cd04d8954d88dd28"
		//property "sonar.pullrequest.branch", "sonar"
		//property "sonar.pullrequest.key", "120"
	}
}

subprojects {

	apply plugin: "jacoco"

	jacoco {
		toolVersion = "0.8.5"
	}

	task jacocoTestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport']) {
		group = "Reporting"
		description = "Generate combined unit and instrumentation test Jacoco coverage report. Assumes that the tests have already been run."

		reports {
			xml.enabled = true
			html.enabled = false
		}

		def excludes = [
				// Android
				'**/R.class',
				'**/R$*.class',
				'**/BuildConfig.*',
				'**/Manifest*.*',

				// Data Binding
				'**/BR.class',
				'**/*Binding.class',
				'**/*Binding*.*',
				'**/generated/callback/*',
				'**/DataBinderMapperImpl*.class',
		]
		def javaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: excludes)
		def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: excludes)
		getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

		def mainSrc = "$project.projectDir/src/main/java"
		getSourceDirectories().setFrom(files([mainSrc]))

		def executionFiles = fileTree(dir: project.buildDir, includes: [
				// Unit tests
				'jacoco/testDebugUnitTest.exec',
				'jacoco/jacoco.exec',
				'jacoco/test.exec',

				// Local instrumentation tests
				'outputs/code_coverage/debugAndroidTest/connected/**/*.ec',

				// Firebase Test Lab instrumentation tests (created by CI job)
				'jacoco/coverage.ec'
		])
		getExecutionData().setFrom(files([executionFiles]))
	}
}