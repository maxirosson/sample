defaults: &defaults
  working_directory: ~/sample
  docker:
    #- image: circleci/openjdk:8-jdk
    - image: circleci/android:api-27-alpha
  environment:
    JVM_OPTS: -Xmx3200m
    GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.caching=true
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      #- run: cat $HOME/.gradle/gradle.properties
      - run: ./gradlew assemble --stacktrace
            
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      - run:
          name: Save apks
          command: |
            mkdir -p ~/apks/
            find . -type f -regex ".*/build/outputs/apk/.*apk" -exec cp {} ~/apks/ \;
          when: always
      
      - store_artifacts:
          path: ~/apks
          destination: apks

  test:
    <<: *defaults
    steps:
      - checkout
      
      - run: ./gradlew test --stacktrace
      
      - run:
          name: Save test results 
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
          
      - store_test_results:
          path: ~/junit
          
      - store_artifacts:
          path: ./core/build/reports/tests/test
          destination: core/tests
          
      - store_artifacts:
          path: ./app/build/reports/tests/test
          destination: app/tests
          
  verify:
    <<: *defaults
    steps:
      - checkout
      - run: ./gradlew :app:lint --stacktrace
      
      - store_artifacts:
          path: ./app/build/reports/lint-results.html
          destination: lint

  verify_nightly:
    <<: *defaults
    steps:
      - checkout
      - run: echo "Checking code quality on nightly......."
      
  deploy:
    <<: *defaults
    steps:
      - checkout
      - run: echo "Deploying sample ......."
  
workflows:
  version: 2
  commit:
    jobs:
      - build
      - test:
          requires:
            - build
      - verify:
          requires:
            - build    
      - deploy:
          requires:
            - test
            - verify
          filters:
            branches:
              only:
                - master
                - production
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - verify_nightly:
          requires:
            - build
